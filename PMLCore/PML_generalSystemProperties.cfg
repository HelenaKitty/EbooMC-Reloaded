HOW TO USE
----------

Settings are in name-value pairs. The name and value are separated by an equal sign ('=') both preceded and followed by a spacebar character (' ').

Lines without this separating character string (" = ") are not used, nor are lines with more than one of these separators (" = ").

If you need to have any number of equal signs both preceded and followed by spacebar characters in a key/value, add another equal sign. For example, " === " will be replaced with " == " after loading.

The setting names provided are ones that PML normally uses. While there are some others that it uses, these are the most important and easiest to work with.

The settings are loaded as Java System Properties. This can be used to load System Properties used by code other than PML, if needed.

System Properties cannot be altered from what the program started with, but new ones can be added. (This limitation is added by PML to ensure that any jvm argument-provided System Properties and such are not overwritten.)

Settings are loaded sequencially, and can replace previously-defined settings.



STANDARD SETTINGS
-----------------

#This dictates where PML should place its logged information
pml.logFolder = PML

#Give this key a value to enable PML's heavy debug mode
pml.heavydebug



#Set the value to the program's normal main class, if you are starting PML as a replacement/standard main
pml.proxyMain

#Set the value to the PML agent argument, when starting PML as a replacement/standard main
pml.dev.agentArgs

#Set the value to the program's normal jar, if you are starting PML as a replacement/standard main
pml.useMainJar



#Give this key a value to enable PML's agent saving transformed base classes (a debug tool, kind of like a log)
pml.agent.saving

#Give this key a value to disable much of the PML agent's class transforming logging
pml.transform.silent



ADVANCED SETTINGS
-----------------

#This dictates where PML should look for its available core components
pml.coreInstallFolder = PML/installs

#Set the value to where PML should look for its' WPUtil dependency (file relative to the PreMain component. default is "<same folder as PreMain component>/WPUtil.<same extension as PreMain component>")
wputil.location

#Set to override where PML conciders the application to be centered
pml.applicationFolderBase

#Set a value if you want PML to *not* stop the program from starting when PML self-errors
pml.loadProgramOnPMLCriticalError



DEVELOPER-FOCUSED SETTINGS
--------------------------

#Set this to something to run PML in developer mode (components are already in classpath)
pml.dev

#Set this to a space-separated list of class names for PML to log extra debug information about when they load (ClassLoader information; active obfuscation, only)
pml.dev.loadDebug

#Set this to a class name that PML should print extra hook injection debug information about when it loads (active obfuscation, only)
pml.hookInjectionDebug

